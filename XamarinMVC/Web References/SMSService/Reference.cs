//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace XamarinMVC.SMSService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SendSMSSoap", Namespace="MessagingWS")]
    public partial class SendSMS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSystemCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDeliverystatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SingleSMSEngineOperationCompleted;
        
        private System.Threading.SendOrPostCallback singleSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback MultiSMSEngineOperationCompleted;
        
        private System.Threading.SendOrPostCallback readInboxOperationCompleted;
        
        private System.Threading.SendOrPostCallback getInboxOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SendSMS() {
            this.Url = global::XamarinMVC.Properties.Settings.Default.XamarinMVC_SMSService_SendSMS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSystemCreditCompletedEventHandler GetSystemCreditCompleted;
        
        /// <remarks/>
        public event getDeliverystatusCompletedEventHandler getDeliverystatusCompleted;
        
        /// <remarks/>
        public event SingleSMSEngineCompletedEventHandler SingleSMSEngineCompleted;
        
        /// <remarks/>
        public event singleSMSCompletedEventHandler singleSMSCompleted;
        
        /// <remarks/>
        public event MultiSMSEngineCompletedEventHandler MultiSMSEngineCompleted;
        
        /// <remarks/>
        public event readInboxCompletedEventHandler readInboxCompleted;
        
        /// <remarks/>
        public event getInboxCompletedEventHandler getInboxCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("MessagingWS/GetSystemCredit", RequestNamespace="MessagingWS", ResponseNamespace="MessagingWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetSystemCredit(int PortalCode, string UserName, string PassWord) {
            object[] results = this.Invoke("GetSystemCredit", new object[] {
                        PortalCode,
                        UserName,
                        PassWord});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemCreditAsync(int PortalCode, string UserName, string PassWord) {
            this.GetSystemCreditAsync(PortalCode, UserName, PassWord, null);
        }
        
        /// <remarks/>
        public void GetSystemCreditAsync(int PortalCode, string UserName, string PassWord, object userState) {
            if ((this.GetSystemCreditOperationCompleted == null)) {
                this.GetSystemCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemCreditOperationCompleted);
            }
            this.InvokeAsync("GetSystemCredit", new object[] {
                        PortalCode,
                        UserName,
                        PassWord}, this.GetSystemCreditOperationCompleted, userState);
        }
        
        private void OnGetSystemCreditOperationCompleted(object arg) {
            if ((this.GetSystemCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemCreditCompleted(this, new GetSystemCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("MessagingWS/getDeliverystatus", RequestNamespace="MessagingWS", ResponseNamespace="MessagingWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] getDeliverystatus(int PortalCode, string UserName, string password, int serverType, long[] ids) {
            object[] results = this.Invoke("getDeliverystatus", new object[] {
                        PortalCode,
                        UserName,
                        password,
                        serverType,
                        ids});
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void getDeliverystatusAsync(int PortalCode, string UserName, string password, int serverType, long[] ids) {
            this.getDeliverystatusAsync(PortalCode, UserName, password, serverType, ids, null);
        }
        
        /// <remarks/>
        public void getDeliverystatusAsync(int PortalCode, string UserName, string password, int serverType, long[] ids, object userState) {
            if ((this.getDeliverystatusOperationCompleted == null)) {
                this.getDeliverystatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDeliverystatusOperationCompleted);
            }
            this.InvokeAsync("getDeliverystatus", new object[] {
                        PortalCode,
                        UserName,
                        password,
                        serverType,
                        ids}, this.getDeliverystatusOperationCompleted, userState);
        }
        
        private void OngetDeliverystatusOperationCompleted(object arg) {
            if ((this.getDeliverystatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDeliverystatusCompleted(this, new getDeliverystatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("MessagingWS/SingleSMSEngine", RequestNamespace="MessagingWS", ResponseNamespace="MessagingWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SingleSMSEngine(int PortalCode, string UserName, string PassWord, string Mobile, string Message, bool FlashSMS, int ServerType) {
            object[] results = this.Invoke("SingleSMSEngine", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        Mobile,
                        Message,
                        FlashSMS,
                        ServerType});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SingleSMSEngineAsync(int PortalCode, string UserName, string PassWord, string Mobile, string Message, bool FlashSMS, int ServerType) {
            this.SingleSMSEngineAsync(PortalCode, UserName, PassWord, Mobile, Message, FlashSMS, ServerType, null);
        }
        
        /// <remarks/>
        public void SingleSMSEngineAsync(int PortalCode, string UserName, string PassWord, string Mobile, string Message, bool FlashSMS, int ServerType, object userState) {
            if ((this.SingleSMSEngineOperationCompleted == null)) {
                this.SingleSMSEngineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSingleSMSEngineOperationCompleted);
            }
            this.InvokeAsync("SingleSMSEngine", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        Mobile,
                        Message,
                        FlashSMS,
                        ServerType}, this.SingleSMSEngineOperationCompleted, userState);
        }
        
        private void OnSingleSMSEngineOperationCompleted(object arg) {
            if ((this.SingleSMSEngineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SingleSMSEngineCompleted(this, new SingleSMSEngineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("MessagingWS/singleSMS", RequestNamespace="MessagingWS", ResponseNamespace="MessagingWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long singleSMS(int PortalCode, string UserName, string PassWord, string Mobile, string Message, int ServerType) {
            object[] results = this.Invoke("singleSMS", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        Mobile,
                        Message,
                        ServerType});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void singleSMSAsync(int PortalCode, string UserName, string PassWord, string Mobile, string Message, int ServerType) {
            this.singleSMSAsync(PortalCode, UserName, PassWord, Mobile, Message, ServerType, null);
        }
        
        /// <remarks/>
        public void singleSMSAsync(int PortalCode, string UserName, string PassWord, string Mobile, string Message, int ServerType, object userState) {
            if ((this.singleSMSOperationCompleted == null)) {
                this.singleSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsingleSMSOperationCompleted);
            }
            this.InvokeAsync("singleSMS", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        Mobile,
                        Message,
                        ServerType}, this.singleSMSOperationCompleted, userState);
        }
        
        private void OnsingleSMSOperationCompleted(object arg) {
            if ((this.singleSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.singleSMSCompleted(this, new singleSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("MessagingWS/MultiSMSEngine", RequestNamespace="MessagingWS", ResponseNamespace="MessagingWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] MultiSMSEngine(int PortalCode, string UserName, string PassWord, string[] Mobiles, string[] Messages, bool FlashSMS, int ServerType, ref int retCode) {
            object[] results = this.Invoke("MultiSMSEngine", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        Mobiles,
                        Messages,
                        FlashSMS,
                        ServerType,
                        retCode});
            retCode = ((int)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void MultiSMSEngineAsync(int PortalCode, string UserName, string PassWord, string[] Mobiles, string[] Messages, bool FlashSMS, int ServerType, int retCode) {
            this.MultiSMSEngineAsync(PortalCode, UserName, PassWord, Mobiles, Messages, FlashSMS, ServerType, retCode, null);
        }
        
        /// <remarks/>
        public void MultiSMSEngineAsync(int PortalCode, string UserName, string PassWord, string[] Mobiles, string[] Messages, bool FlashSMS, int ServerType, int retCode, object userState) {
            if ((this.MultiSMSEngineOperationCompleted == null)) {
                this.MultiSMSEngineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMultiSMSEngineOperationCompleted);
            }
            this.InvokeAsync("MultiSMSEngine", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        Mobiles,
                        Messages,
                        FlashSMS,
                        ServerType,
                        retCode}, this.MultiSMSEngineOperationCompleted, userState);
        }
        
        private void OnMultiSMSEngineOperationCompleted(object arg) {
            if ((this.MultiSMSEngineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MultiSMSEngineCompleted(this, new MultiSMSEngineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("MessagingWS/readInbox", RequestNamespace="MessagingWS", ResponseNamespace="MessagingWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable readInbox(int PortalCode, string UserName, string PassWord, int latestCount, ref int returnStatus) {
            object[] results = this.Invoke("readInbox", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        latestCount,
                        returnStatus});
            returnStatus = ((int)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void readInboxAsync(int PortalCode, string UserName, string PassWord, int latestCount, int returnStatus) {
            this.readInboxAsync(PortalCode, UserName, PassWord, latestCount, returnStatus, null);
        }
        
        /// <remarks/>
        public void readInboxAsync(int PortalCode, string UserName, string PassWord, int latestCount, int returnStatus, object userState) {
            if ((this.readInboxOperationCompleted == null)) {
                this.readInboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreadInboxOperationCompleted);
            }
            this.InvokeAsync("readInbox", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        latestCount,
                        returnStatus}, this.readInboxOperationCompleted, userState);
        }
        
        private void OnreadInboxOperationCompleted(object arg) {
            if ((this.readInboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.readInboxCompleted(this, new readInboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("MessagingWS/getInbox", RequestNamespace="MessagingWS", ResponseNamespace="MessagingWS", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getInbox(int PortalCode, string UserName, string PassWord, long latestCount, long startID, ref int returnStatus) {
            object[] results = this.Invoke("getInbox", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        latestCount,
                        startID,
                        returnStatus});
            returnStatus = ((int)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getInboxAsync(int PortalCode, string UserName, string PassWord, long latestCount, long startID, int returnStatus) {
            this.getInboxAsync(PortalCode, UserName, PassWord, latestCount, startID, returnStatus, null);
        }
        
        /// <remarks/>
        public void getInboxAsync(int PortalCode, string UserName, string PassWord, long latestCount, long startID, int returnStatus, object userState) {
            if ((this.getInboxOperationCompleted == null)) {
                this.getInboxOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetInboxOperationCompleted);
            }
            this.InvokeAsync("getInbox", new object[] {
                        PortalCode,
                        UserName,
                        PassWord,
                        latestCount,
                        startID,
                        returnStatus}, this.getInboxOperationCompleted, userState);
        }
        
        private void OngetInboxOperationCompleted(object arg) {
            if ((this.getInboxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getInboxCompleted(this, new getInboxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetSystemCreditCompletedEventHandler(object sender, GetSystemCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getDeliverystatusCompletedEventHandler(object sender, getDeliverystatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDeliverystatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDeliverystatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void SingleSMSEngineCompletedEventHandler(object sender, SingleSMSEngineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SingleSMSEngineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SingleSMSEngineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void singleSMSCompletedEventHandler(object sender, singleSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class singleSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal singleSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void MultiSMSEngineCompletedEventHandler(object sender, MultiSMSEngineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MultiSMSEngineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MultiSMSEngineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int retCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void readInboxCompletedEventHandler(object sender, readInboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class readInboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal readInboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int returnStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getInboxCompletedEventHandler(object sender, getInboxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getInboxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getInboxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int returnStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591